import string;
import lingo/pegcode/driver;
import const;

Expr ::= Const, Variable, EMul, EAdd, ESub, EDiv, EPow;
Variable : (name : string);
EMul : (left : Expr, right : Expr);
EAdd : (left : Expr, right : Expr);
ESub : (left : Expr, right : Expr);
EDiv : (left : Expr, right : Expr);
EPow : (base : Expr, expnt : Expr);

parser = compilePegGrammar("#include lab9.lingo");

s2expr(str : string) -> Expr {
    parsic(parser, str, defaultPegActions);
}

expr2s(expr : Expr) -> string {
    switch (expr) {
        Const() : c2s(expr);
        Variable(name) : name;
        EMul(left, right) : concatStrings(["(", expr2s(left), "*", expr2s(right), ")"]);
        EAdd(left, right) : concatStrings(["(", expr2s(left), "+", expr2s(right), ")"]);
        ESub(left, right) : concatStrings(["(", expr2s(left), "-", expr2s(right), ")"]);
        EDiv(left, right) : concatStrings(["(", expr2s(left), "/", expr2s(right), ")"]);
        EPow(base, expnt) : concatStrings(["(", expr2s(base), "^", expr2s(expnt), ")"]);
    }
}

calc(expr : Expr, variables : Tree<string, Const>) -> Const {
    switch (expr) {
        Const() : expr;
        Variable(name) : lookupTreeDef(variables, name, NaN());
        EMul(left, right) : calcFunc2args(left, right, cMul, variables);
        EAdd(left, right) : calcFunc2args(left, right, cAdd, variables);
        ESub(left, right) : calcFunc2args(left, right, cSub, variables);
        EDiv(left, right) : calcFunc2args(left, right, cDiv, variables);
        EPow(left, right) : calcFunc2args(left, right, cPow, variables);
    }
}

calcFunc2args(left : Expr, right : Expr, func : (Const, Const) -> Const, variables : Tree<string, Const>) -> Const {
    leftCalculated = calc(left, variables);
    rightCalculated = calc(right, variables);
    func(leftCalculated, rightCalculated);
}

testExpr(expr : Expr, variables : Tree<string, Const>) -> void {
    println("====================Test====================");
    // println(expr);
    println(expr2s(expr));
    println(c2s(calc(expr, variables)));
}

main() {
    variables = [Pair("x", Rat(3, 1)), Pair("y", Rat(2, 1))];
    varTree = setTreeValues(makeTree(), variables);

    expr1 = s2expr("(((x / 6) ^ 3) + (7 / 6))");
    expr2 = s2expr("(((x + y) ^ 2) / (5 / 3))");
    expr3 = s2expr("((x ^ 4) + (((10 - 5) * y) / 3))");
    expr4 = s2expr("((x ^ y) ^ (x + y))");
    
    testExpr(expr1, varTree);
    testExpr(expr2, varTree);
    testExpr(expr3, varTree);
    testExpr(expr4, varTree);
}