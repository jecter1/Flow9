import string;
import math/math;

export {
    rat(numer : int, denom : int);

    rMul(left : rat, right : rat) -> rat;
    rAdd(left : rat, right : rat) -> rat;
    rSub(left : rat, right : rat) -> rat;
    rPow(base : rat, expnt : int) -> Maybe<rat>;
    rDiv(left : rat, right : rat) -> Maybe<rat>;
}

rMul(left : rat, right : rat) -> rat {
    numer = left.numer * right.numer;
    denom = left.denom * right.denom;
    gcd = gcd(numer, denom);
    rat(numer / gcd, denom / gcd);
}

rAdd(left : rat, right : rat) -> rat {
    numer = left.numer * right.denom + right.numer * left.denom;
    denom = left.denom * right.denom;
    gcd = gcd(numer, denom);
    rat(numer / gcd, denom / gcd);
}

rSub(left : rat, right : rat) -> rat {
    numer = left.numer * right.denom - right.numer * left.denom;
    denom = left.denom * right.denom;
    gcd = gcd(numer, denom);
    rat(numer / gcd, denom / gcd);
}

rPow(base : rat, expnt : int) -> Maybe<rat> {
    if (base.numer == 0 && expnt == 0) {
        None();
    } else if (base.numer == 0) {
        Some(rat(0, 1));
    } else if (expnt == 0) {
        Some(rat(1, 1));
    } else if (expnt < 0) {
        rPow(rat(base.denom, base.numer), -1 * expnt);
    } else {
        prev = rPow(base, expnt - 1);
        prev ?? Some(rMul(base, prev)) : None();
    }
}

rDiv(left : rat, right : rat) -> Maybe<rat> {
    if (right.numer == 0) {
        None();
    } else {
        rightRev = rat(right.denom, right.numer);
        Some(rMul(left, rightRev));
    }
}